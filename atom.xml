<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ariel&#39;s Blog</title>
  
  <subtitle>我想在那里最蓝的大海扬帆 , 绝不管自己能不能回还</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-01-04T15:23:53.061Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Ariel</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基于NodeJs防止csrf攻击</title>
    <link href="http://yoursite.com/2018/01/04/%E5%9F%BA%E4%BA%8ENodeJs%E9%98%B2%E6%AD%A2csrf%E6%94%BB%E5%87%BB/"/>
    <id>http://yoursite.com/2018/01/04/基于NodeJs防止csrf攻击/</id>
    <published>2018-01-04T13:32:40.000Z</published>
    <updated>2018-01-04T15:23:53.061Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSRF简述"><a href="#CSRF简述" class="headerlink" title="CSRF简述"></a>CSRF简述</h2><p>CSRF（Cross-site request forgery），中文名称：跨站请求伪造，也被称为：one click attack/session riding，缩写为：CSRF/XSRF。  </p><p>CSRF是一种夹持用户在已经登陆的web应用程序上执行非本意的操作的攻击方式。相比于XSS，CSRF是利用了系统对页面浏览器的信任，XSS则利用了系统对用户的信任。</p><h2 id="CSRF攻击原理及过程"><a href="#CSRF攻击原理及过程" class="headerlink" title="CSRF攻击原理及过程"></a>CSRF攻击原理及过程</h2><ul><li>User(C)通过浏览器访问并请求登录受信任站点A；</li><li>站点A通过验证并生成cookie返给浏览器</li><li>User(c)在没有退出站点A的情况下访问危险站点B</li><li>站点B接到请求后返回攻击代码，并发出一个请求要求访问第三方站点A</li><li>浏览器在接收到这些攻击性代码后，根据站点B的请求，在用户不知情的情况下携带Cookie信息，向站点A发出请求。站点A并不知道该请求其实是由B发起的，所以会根据User(C)的Cookie信息以C的权限处理该请求，导致来自站点B的恶意代码被执行<a id="more"></a></li></ul><h2 id="NodeJs下防御CSRF攻击思路"><a href="#NodeJs下防御CSRF攻击思路" class="headerlink" title="NodeJs下防御CSRF攻击思路"></a>NodeJs下防御CSRF攻击思路</h2><h3 id="验证-HTTP-Referer-字段"><a href="#验证-HTTP-Referer-字段" class="headerlink" title="验证 HTTP Referer 字段"></a>验证 HTTP Referer 字段</h3><p> HTTP 头中有一个 Referer 字段，它记录了该 HTTP 请求的来源地址，对该地址进行判断，如果同源则通过验证，否则拒绝请求<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">refererCheck(req, res, next)&#123;</span><br><span class="line">    <span class="keyword">let</span> referer = req.headers.referer;</span><br><span class="line">    <span class="keyword">let</span> refererHost = (referer &amp;&amp; referer.replace(<span class="regexp">/https?:\/\//ig</span>, <span class="string">""</span>).split(<span class="string">"/"</span>)[<span class="number">0</span>]) || <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"\\."</span> + app.config.baseURI.replace(<span class="regexp">/\./g</span>, <span class="string">"\\."</span>) + <span class="string">"$"</span>;</span><br><span class="line">    <span class="keyword">if</span>(!reg.test(refererHost))&#123;</span><br><span class="line">        next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">app.get(<span class="string">'/api/test'</span>, utils.refererCheck, (req, res, next) =&gt; &#123;</span><br><span class="line">    <span class="comment">// dosomething</span></span><br><span class="line">    <span class="keyword">return</span> xxx;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>以上，当请求<code>/api/test</code>时，站点A会劫持User(c)的请求并判断请求referer来源，如果发现来源于站点，则会拒绝请求</p><h3 id="添加-token-并验证"><a href="#添加-token-并验证" class="headerlink" title="添加 token 并验证"></a>添加 token 并验证</h3><p>在服务器上生成一个token, web端发起的请求都带上token这个参数, 请求中的token与服务端的token不一致,则抛出错误.<br>1、引入npm包csurf<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> csrf = <span class="built_in">require</span>(<span class="string">'csurf'</span>);</span><br><span class="line"><span class="keyword">const</span> csrfProtection = csrf(&#123;<span class="attr">cookie</span>: <span class="literal">true</span>&#125;);</span><br></pre></td></tr></table></figure></p><p>2、校验请求<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/form'</span>, csrfProtection, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// pass the csrfToken to the view </span></span><br><span class="line">    res.render(<span class="string">'send'</span>, &#123; <span class="attr">csrfToken</span>: req.csrfToken() &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h2 id="关于csurf模块"><a href="#关于csurf模块" class="headerlink" title="关于csurf模块"></a>关于csurf模块</h2><p>首先看下源码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">csurf</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> opts = options || &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get cookie options</span></span><br><span class="line">    <span class="keyword">var</span> cookie = getCookieOptions(opts.cookie)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get session options</span></span><br><span class="line">    <span class="keyword">var</span> sessionKey = opts.sessionKey || <span class="string">'session'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// get value getter</span></span><br><span class="line">    <span class="keyword">var</span> value = opts.value || defaultValue</span><br><span class="line"></span><br><span class="line">    <span class="comment">// token repo</span></span><br><span class="line">    <span class="keyword">var</span> tokens = <span class="keyword">new</span> Tokens(opts)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ignored methods</span></span><br><span class="line">    <span class="keyword">var</span> ignoreMethods = opts.ignoreMethods === <span class="literal">undefined</span></span><br><span class="line">        ? [<span class="string">'GET'</span>, <span class="string">'HEAD'</span>, <span class="string">'OPTIONS'</span>]</span><br><span class="line">        : opts.ignoreMethods</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray(ignoreMethods)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'option ignoreMethods must be an array'</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// generate lookup</span></span><br><span class="line">    <span class="keyword">var</span> ignoreMethod = getIgnoredMethods(ignoreMethods)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">csrf</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// validate the configuration against request</span></span><br><span class="line">        <span class="keyword">if</span> (!verifyConfiguration(req, sessionKey, cookie)) &#123;</span><br><span class="line">            <span class="keyword">return</span> next(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'misconfigured csrf'</span>))</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// get the secret from the request</span></span><br><span class="line">        <span class="keyword">var</span> secret = getSecret(req, sessionKey, cookie)</span><br><span class="line">        <span class="keyword">var</span> token</span><br><span class="line"></span><br><span class="line">        <span class="comment">// lazy-load token getter</span></span><br><span class="line">        req.csrfToken = <span class="function"><span class="keyword">function</span> <span class="title">csrfToken</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> sec = !cookie</span><br><span class="line">                ? getSecret(req, sessionKey, cookie)</span><br><span class="line">                : secret</span><br><span class="line"></span><br><span class="line">            <span class="comment">// use cached token if secret has not changed</span></span><br><span class="line">            <span class="keyword">if</span> (token &amp;&amp; sec === secret) &#123;</span><br><span class="line">                <span class="keyword">return</span> token</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// generate &amp; set new secret</span></span><br><span class="line">            <span class="keyword">if</span> (sec === <span class="literal">undefined</span>) &#123;</span><br><span class="line">                sec = tokens.secretSync()</span><br><span class="line">                setSecret(req, res, sessionKey, sec, cookie)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// update changed secret</span></span><br><span class="line">            secret = sec</span><br><span class="line"></span><br><span class="line">            <span class="comment">// create new token</span></span><br><span class="line">            token = tokens.create(secret)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> token</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// generate &amp; set secret</span></span><br><span class="line">        <span class="keyword">if</span> (!secret) &#123;</span><br><span class="line">            secret = tokens.secretSync()</span><br><span class="line">            setSecret(req, res, sessionKey, secret, cookie)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// verify the incoming token</span></span><br><span class="line">        <span class="keyword">if</span> (!ignoreMethod[req.method] &amp;&amp; !tokens.verify(secret, value(req))) &#123;</span><br><span class="line">            <span class="keyword">return</span> next(createError(<span class="number">403</span>, <span class="string">'invalid csrf token'</span>, &#123;</span><br><span class="line">                code: <span class="string">'EBADCSRFTOKEN'</span></span><br><span class="line">            &#125;))</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        next()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="服务端如何生产成token-token存储的位置"><a href="#服务端如何生产成token-token存储的位置" class="headerlink" title="服务端如何生产成token, token存储的位置"></a>服务端如何生产成token, token存储的位置</h3><p>当csurf()方法被执行时，会为req添加一个方法csrfToken，该方法生成一个token, 并保存session中<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// generate &amp; set secret</span></span><br><span class="line"><span class="keyword">if</span> (!secret) &#123;</span><br><span class="line">    secret = tokens.secretSync()</span><br><span class="line">    setSecret(req, res, sessionKey, secret, cookie)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="服务端校验的token-可能来自哪里"><a href="#服务端校验的token-可能来自哪里" class="headerlink" title="服务端校验的token, 可能来自哪里"></a>服务端校验的token, 可能来自哪里</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defaultValue</span> (<span class="params">req</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (req.body &amp;&amp; req.body._csrf) ||</span><br><span class="line">        (req.query &amp;&amp; req.query._csrf) ||</span><br><span class="line">        (req.headers[<span class="string">'csrf-token'</span>]) ||</span><br><span class="line">        (req.headers[<span class="string">'xsrf-token'</span>]) ||</span><br><span class="line">        (req.headers[<span class="string">'x-csrf-token'</span>]) ||</span><br><span class="line">        (req.headers[<span class="string">'x-xsrf-token'</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从代码上，如果csurlf初始化时没带任何参数，则校验的token使用使用默认的值，默认的token可能来自req.body, req.query, req.header</p><h3 id="哪些请求不校验token"><a href="#哪些请求不校验token" class="headerlink" title="哪些请求不校验token"></a>哪些请求不校验token</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ignored methods</span></span><br><span class="line"><span class="keyword">var</span> ignoreMethods = opts.ignoreMethods === <span class="literal">undefined</span></span><br><span class="line">    ? [<span class="string">'GET'</span>, <span class="string">'HEAD'</span>, <span class="string">'OPTIONS'</span>]</span><br><span class="line">    : opts.ignoreMethods</span><br></pre></td></tr></table></figure><p>如果csurlf初始化时没带任何参数，则 get head option方法不做校验</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>1、<a href="https://www.npmjs.com/package/csurf" target="_blank" rel="noopener">npm csurf</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CSRF简述&quot;&gt;&lt;a href=&quot;#CSRF简述&quot; class=&quot;headerlink&quot; title=&quot;CSRF简述&quot;&gt;&lt;/a&gt;CSRF简述&lt;/h2&gt;&lt;p&gt;CSRF（Cross-site request forgery），中文名称：跨站请求伪造，也被称为：one click attack/session riding，缩写为：CSRF/XSRF。  &lt;/p&gt;
&lt;p&gt;CSRF是一种夹持用户在已经登陆的web应用程序上执行非本意的操作的攻击方式。相比于XSS，CSRF是利用了系统对页面浏览器的信任，XSS则利用了系统对用户的信任。&lt;/p&gt;
&lt;h2 id=&quot;CSRF攻击原理及过程&quot;&gt;&lt;a href=&quot;#CSRF攻击原理及过程&quot; class=&quot;headerlink&quot; title=&quot;CSRF攻击原理及过程&quot;&gt;&lt;/a&gt;CSRF攻击原理及过程&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;User(C)通过浏览器访问并请求登录受信任站点A；&lt;/li&gt;
&lt;li&gt;站点A通过验证并生成cookie返给浏览器&lt;/li&gt;
&lt;li&gt;User(c)在没有退出站点A的情况下访问危险站点B&lt;/li&gt;
&lt;li&gt;站点B接到请求后返回攻击代码，并发出一个请求要求访问第三方站点A&lt;/li&gt;
&lt;li&gt;浏览器在接收到这些攻击性代码后，根据站点B的请求，在用户不知情的情况下携带Cookie信息，向站点A发出请求。站点A并不知道该请求其实是由B发起的，所以会根据User(C)的Cookie信息以C的权限处理该请求，导致来自站点B的恶意代码被执行
    
    </summary>
    
      <category term="Node" scheme="http://yoursite.com/categories/Node/"/>
    
    
      <category term="Node" scheme="http://yoursite.com/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>深入理解ES6新特性之promise篇</title>
    <link href="http://yoursite.com/2018/01/03/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ES6%E6%96%B0%E7%89%B9%E6%80%A7%E4%B9%8Bpromise%E7%AF%87/"/>
    <id>http://yoursite.com/2018/01/03/深入理解ES6新特性之promise篇/</id>
    <published>2018-01-03T14:03:30.000Z</published>
    <updated>2018-01-03T16:16:41.115Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JS单线程特性"><a href="#JS单线程特性" class="headerlink" title="JS单线程特性"></a>JS单线程特性</h2><p>浏览器（或者说JS引擎）执行JS的机制是基于事件循环。</p><p>由于JS是单线程，所以同一时间只能执行一个任务，其他任务就得排队，后续任务必须等到前一个任务结束才能开始执行。为了避免因为某些长时间任务造成的无意义等待，JS引入了异步的概念，用另一个线程来管理异步任务。</p><p>同步任务直接在主线程队列中顺序执行，而异步任务会进入另一个任务队列，不会阻塞主线程。等到主线程队列空了（执行完了）的时候，就会去异步队列查询是否有可执行的异步任务了（异步任务通常进入异步队列之后还要等一些条件才能执行，如ajax请求、文件读写），如果某个异步任务可以执行了便加入主线程队列，以此循环。</p><h2 id="回调金字塔"><a href="#回调金字塔" class="headerlink" title="回调金字塔"></a>回调金字塔</h2><p>一直以来，JavaScript处理异步都是以callback的方式，在callback的模型里边，我们假设需要执行一个异步队列，代码看起来可能像这样：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">doSomethingAsync1(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    doSomethingAsync2(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        doSomethingAsync3(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            doSomethingAsync4(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                doSomethingAsync5(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                    <span class="comment">// code...</span></span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>可以发现一个问题，在回调函数嵌套层数不深的情况下，代码还算容易理解和维护，一旦嵌套层数加深，就会出现“回调金字塔”的问题。</p><p>近几年随着JavaScript开发模式的逐渐成熟，CommonJS规范顺势而生，其中就包括提出了Promise规范，Promise完全改变了js异步编程的写法，让异步编程变得十分的易于理解。<br><a id="more"></a></p><h2 id="promise对象"><a href="#promise对象" class="headerlink" title="promise对象"></a>promise对象</h2><blockquote><p>Promise 对象用于一个异步操作的最终完成（或失败）及其结果值的表示。(简单点说就是处理异步请求。我们经常会做些承诺，如果我赢了你就嫁给我，如果输了我就嫁给你之类的诺言。这就是promise的中文含义：诺言，一个成功，一个失败。)</p></blockquote><p>一个<code>promise</code>有以下几个状态：</p><ul><li>pending: 初始状态，成功或失败状态。</li><li>fulfilled: 意味着操作成功完成。</li><li>rejected: 意味着操作失败。</li></ul><p>pending 状态的 Promise 对象可能触发fulfilled 状态并传递一个值给相应的状态处理方法，也可能触发失败状态（rejected）并传递失败信息。当其中任一种情况出现时，Promise 对象的 then 方法绑定的处理方法（handlers ）就会被调用（then方法包含两个参数：onfulfilled 和 onrejected，它们都是 Function 类型。当Promise状态为fulfilled时，调用 then 的 onfulfilled 方法，当Promise状态为rejected时，调用 then 的 onrejected 方法， 所以在异步操作的完成和绑定处理方法之间不存在竞争）。</p><p>因为 <code>Promise.prototype.then</code> 和  <code>Promise.prototype.catch</code> 方法返回promise 对象， 所以它们可以被链式调用。</p><h3 id="Promise-all-iterable-："><a href="#Promise-all-iterable-：" class="headerlink" title="Promise.all(iterable)："></a>Promise.all(iterable)：</h3><p>Promise.all方法用于将多个Promise实例，包装成一个新的Promise实例。<br><code>var p = Promise.all([p1,p2,p3]);</code><br>Promise.all方法接受一个数组作为参数，p1、p2、p3都是Promise对象实例。p的状态由p1、p2、p3决定，分两种情况：</p><ul><li>只有p1、p2、p3的状态都变成fulfilled，p的状态才会变成fulfilled，此时p1、p2、p3的返回值组成一个数组，传递给p的回调函数。</li><li>只要p1、p2、p3之中有一个被rejected，p的状态就变成rejected，此时第一个被reject的实例的返回值，会传递给p的回调函数。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> promise1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    resolve(&#123;</span><br><span class="line">        data: <span class="string">'promise1'</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    resolve(&#123;</span><br><span class="line">        data: <span class="string">'promise2'</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> promise3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    reject(&#123;</span><br><span class="line">        data: <span class="string">'promise3'</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">Promise</span>.all([promise1, promise2]).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.dir(<span class="string">`promise.all([promise1, promise2])触发成功啦`</span>);</span><br><span class="line">&#125;,res =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.dir(<span class="string">`promise.all([promise1, promise2])触发失败啦`</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">Promise</span>.all([promise1, promise3]).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.dir(<span class="string">`promise.all([promise1, promise3])触发成功啦`</span>);</span><br><span class="line">&#125;,res =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.dir(<span class="string">`promise.all([promise1, promise3])触发失败啦`</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/images/promise.all.png" alt="promise.all"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;JS单线程特性&quot;&gt;&lt;a href=&quot;#JS单线程特性&quot; class=&quot;headerlink&quot; title=&quot;JS单线程特性&quot;&gt;&lt;/a&gt;JS单线程特性&lt;/h2&gt;&lt;p&gt;浏览器（或者说JS引擎）执行JS的机制是基于事件循环。&lt;/p&gt;
&lt;p&gt;由于JS是单线程，所以同一时间只能执行一个任务，其他任务就得排队，后续任务必须等到前一个任务结束才能开始执行。为了避免因为某些长时间任务造成的无意义等待，JS引入了异步的概念，用另一个线程来管理异步任务。&lt;/p&gt;
&lt;p&gt;同步任务直接在主线程队列中顺序执行，而异步任务会进入另一个任务队列，不会阻塞主线程。等到主线程队列空了（执行完了）的时候，就会去异步队列查询是否有可执行的异步任务了（异步任务通常进入异步队列之后还要等一些条件才能执行，如ajax请求、文件读写），如果某个异步任务可以执行了便加入主线程队列，以此循环。&lt;/p&gt;
&lt;h2 id=&quot;回调金字塔&quot;&gt;&lt;a href=&quot;#回调金字塔&quot; class=&quot;headerlink&quot; title=&quot;回调金字塔&quot;&gt;&lt;/a&gt;回调金字塔&lt;/h2&gt;&lt;p&gt;一直以来，JavaScript处理异步都是以callback的方式，在callback的模型里边，我们假设需要执行一个异步队列，代码看起来可能像这样：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;doSomethingAsync1(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    doSomethingAsync2(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        doSomethingAsync3(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            doSomethingAsync4(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                doSomethingAsync5(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;comment&quot;&gt;// code...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以发现一个问题，在回调函数嵌套层数不深的情况下，代码还算容易理解和维护，一旦嵌套层数加深，就会出现“回调金字塔”的问题。&lt;/p&gt;
&lt;p&gt;近几年随着JavaScript开发模式的逐渐成熟，CommonJS规范顺势而生，其中就包括提出了Promise规范，Promise完全改变了js异步编程的写法，让异步编程变得十分的易于理解。&lt;br&gt;
    
    </summary>
    
      <category term="ES6" scheme="http://yoursite.com/categories/ES6/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>Vue学习笔记之父子组件通信</title>
    <link href="http://yoursite.com/2017/12/27/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/"/>
    <id>http://yoursite.com/2017/12/27/Vue学习笔记之父子组件通信/</id>
    <published>2017-12-27T13:29:29.000Z</published>
    <updated>2017-12-28T15:11:25.234Z</updated>
    
    <content type="html"><![CDATA[<h1 id="定义父子组件"><a href="#定义父子组件" class="headerlink" title="定义父子组件"></a>定义父子组件</h1><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hello"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Welcome</span> <span class="attr">:message</span>=<span class="string">"msg"</span> @<span class="attr">contact</span>=<span class="string">"comFromChildren"</span>&gt;</span><span class="tag">&lt;/<span class="name">Welcome</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">v-model</span>=<span class="string">"userName"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">v-model</span>=<span class="string">"age"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> @<span class="attr">click</span>=<span class="string">"addUser"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Welcome <span class="keyword">from</span> <span class="string">'./welcome'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">'hello'</span>,</span><br><span class="line">    components: &#123;Welcome&#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            msg: <span class="string">'Welcome to Your Vue.js App'</span>,</span><br><span class="line">            userName: <span class="string">''</span>,</span><br><span class="line">            age: <span class="string">''</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        addUser() &#123;</span><br><span class="line">            <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">            self.$ajax(&#123;</span><br><span class="line">                url: <span class="string">'/api/user/addUser'</span>,</span><br><span class="line">                method: <span class="string">'post'</span>,</span><br><span class="line">                dataType: <span class="string">'json'</span>,</span><br><span class="line">                data: &#123;</span><br><span class="line">                    username: self.userName,</span><br><span class="line">                    age: self.age</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (res.data.success) &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(res);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        comFromChildren: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'子组件传来信息啦'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="定义子组件"><a href="#定义子组件" class="headerlink" title="定义子组件"></a>定义子组件</h1><h2 id="HTML-1"><a href="#HTML-1" class="headerlink" title="HTML"></a>HTML</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--接受父组件传来的消息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="JavaScript-1"><a href="#JavaScript-1" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">"welcome"</span>,</span><br><span class="line">    props: [<span class="string">'message'</span>],</span><br><span class="line">    created() &#123;</span><br><span class="line">        <span class="keyword">this</span>.$emit(<span class="string">'contact'</span>); <span class="comment">//通知父组件</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="子组件接收父组件数据"><a href="#子组件接收父组件数据" class="headerlink" title="子组件接收父组件数据"></a>子组件接收父组件数据</h1><p><img src="/images/parentToChild.png" alt="父组件向子组件传值"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;定义父子组件&quot;&gt;&lt;a href=&quot;#定义父子组件&quot; class=&quot;headerlink&quot; title=&quot;定义父子组件&quot;&gt;&lt;/a&gt;定义父子组件&lt;/h1&gt;&lt;h2 id=&quot;HTML&quot;&gt;&lt;a href=&quot;#HTML&quot; class=&quot;headerlink&quot; title=&quot;HTML&quot;&gt;&lt;/a&gt;HTML&lt;/h2&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;Welcome&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;:message&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;msg&quot;&lt;/span&gt; @&lt;span class=&quot;attr&quot;&gt;contact&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;comFromChildren&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;Welcome&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;username&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;v-model&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;userName&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;br&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;age&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;v-model&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;age&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;br&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;javascript:;&quot;&lt;/span&gt; @&lt;span class=&quot;attr&quot;&gt;click&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;addUser&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;提交&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;JavaScript&quot;&gt;&lt;a href=&quot;#JavaScript&quot; class=&quot;headerlink&quot; title=&quot;JavaScript&quot;&gt;&lt;/a&gt;JavaScript&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Welcome &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;./welcome&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name: &lt;span class=&quot;string&quot;&gt;&#39;hello&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    components: &amp;#123;Welcome&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    data() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            msg: &lt;span class=&quot;string&quot;&gt;&#39;Welcome to Your Vue.js App&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            userName: &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            age: &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    methods: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        addUser() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; self = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            self.$ajax(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                url: &lt;span class=&quot;string&quot;&gt;&#39;/api/user/addUser&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                method: &lt;span class=&quot;string&quot;&gt;&#39;post&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                dataType: &lt;span class=&quot;string&quot;&gt;&#39;json&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                data: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    username: self.userName,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    age: self.age&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;res&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (res.data.success) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(res);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        comFromChildren: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;子组件传来信息啦&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>webpack部署过程中遇到的问题</title>
    <link href="http://yoursite.com/2017/12/05/webpack-md/"/>
    <id>http://yoursite.com/2017/12/05/webpack-md/</id>
    <published>2017-12-05T09:39:11.000Z</published>
    <updated>2017-12-18T12:27:12.184Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>今天webpack部署新接手的项目的时候，<code>npm install</code> 好像加载不了<code>package.json</code>里面指定的依赖包！<br><img src="/images/webpack-error-1.png" alt="问题样式"><br>以至于项目在编译过程中有些静态资源文件不能require，翻阅各种文档，均不能解决，头疼……<br><a id="more"></a></p><h2 id="暂时解决方案"><a href="#暂时解决方案" class="headerlink" title="暂时解决方案"></a>暂时解决方案</h2><p>从其他同事处拷贝了安装好的依赖包，放到项目代码中<br>依然有问题，because……同事的操作系统是Windows，所以拷贝之后，依然有些包不能用：<br><img src="/images/webpack-error-2.png" alt="问题样式"><br>根据报错提示命令执行，终于解决：</p><blockquote><p>暂时留坑在这里，等调试完项目之后再来回顾该问题 /(ㄒoㄒ)/~~</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;今天webpack部署新接手的项目的时候，&lt;code&gt;npm install&lt;/code&gt; 好像加载不了&lt;code&gt;package.json&lt;/code&gt;里面指定的依赖包！&lt;br&gt;&lt;img src=&quot;/images/webpack-error-1.png&quot; alt=&quot;问题样式&quot;&gt;&lt;br&gt;以至于项目在编译过程中有些静态资源文件不能require，翻阅各种文档，均不能解决，头疼……&lt;br&gt;
    
    </summary>
    
      <category term="webpack" scheme="http://yoursite.com/categories/webpack/"/>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>MacOS 下配置Apache本地域名服务器</title>
    <link href="http://yoursite.com/2017/12/01/MacOS-%E4%B8%8B%E9%85%8D%E7%BD%AEApache%E6%9C%AC%E5%9C%B0%E5%9F%9F%E5%90%8D%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://yoursite.com/2017/12/01/MacOS-下配置Apache本地域名服务器/</id>
    <published>2017-12-01T03:17:29.000Z</published>
    <updated>2017-12-01T05:56:14.005Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求来源"><a href="#需求来源" class="headerlink" title="需求来源"></a>需求来源</h2><p>在开发项目的过程中，遇到需要经过域名访问资源来进行debug的场景，但项目是静态资源项目，没有本地服务。SO，想到了通过配置本地Apache域名访问资源的办法。</p><h2 id="实施过程"><a href="#实施过程" class="headerlink" title="实施过程"></a>实施过程</h2><h3 id="配置本地hosts"><a href="#配置本地hosts" class="headerlink" title="配置本地hosts"></a>配置本地hosts</h3><p><code>vi /etc/hosts</code>，配置自己预期的域名到hosts文件<br><img src="/images/hosts.png" alt="hosts"><br><a id="more"></a></p><h3 id="开启Apache虚拟主机功能"><a href="#开启Apache虚拟主机功能" class="headerlink" title="开启Apache虚拟主机功能"></a>开启Apache虚拟主机功能</h3><p><code>vi /etc/apache2/httpd.conf</code>打开Apache配置文件，找到<code>Include /private/etc/apache2/extra/httpd-vhosts.conf</code>，放开注释，开启虚拟主机功能:<br><img src="/images/openvirtual.png" alt="virtual"></p><p><code>vi /etc/apache2/extra/httpd-vhosts.conf</code>配置虚拟主机：</p><p><img src="/images/virtualhost.png" alt="virtualhost"></p><h3 id="启动Apache服务，域名访问项目"><a href="#启动Apache服务，域名访问项目" class="headerlink" title="启动Apache服务，域名访问项目"></a>启动Apache服务，域名访问项目</h3><p><code>sudo apachectl start</code>，好了，现在可以通过域名访问项目资源了：<br><img src="/images/load.png" alt="virtualhost"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;需求来源&quot;&gt;&lt;a href=&quot;#需求来源&quot; class=&quot;headerlink&quot; title=&quot;需求来源&quot;&gt;&lt;/a&gt;需求来源&lt;/h2&gt;&lt;p&gt;在开发项目的过程中，遇到需要经过域名访问资源来进行debug的场景，但项目是静态资源项目，没有本地服务。SO，想到了通过配置本地Apache域名访问资源的办法。&lt;/p&gt;
&lt;h2 id=&quot;实施过程&quot;&gt;&lt;a href=&quot;#实施过程&quot; class=&quot;headerlink&quot; title=&quot;实施过程&quot;&gt;&lt;/a&gt;实施过程&lt;/h2&gt;&lt;h3 id=&quot;配置本地hosts&quot;&gt;&lt;a href=&quot;#配置本地hosts&quot; class=&quot;headerlink&quot; title=&quot;配置本地hosts&quot;&gt;&lt;/a&gt;配置本地hosts&lt;/h3&gt;&lt;p&gt;&lt;code&gt;vi /etc/hosts&lt;/code&gt;，配置自己预期的域名到hosts文件&lt;br&gt;&lt;img src=&quot;/images/hosts.png&quot; alt=&quot;hosts&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="服务器" scheme="http://yoursite.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="Apache" scheme="http://yoursite.com/tags/Apache/"/>
    
  </entry>
  
  <entry>
    <title>线上问题日志定位手段</title>
    <link href="http://yoursite.com/2017/11/30/online-problem-logs/"/>
    <id>http://yoursite.com/2017/11/30/online-problem-logs/</id>
    <published>2017-11-30T03:50:30.000Z</published>
    <updated>2017-12-04T10:41:38.391Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote><p>项目在上线上环境之后，由于项目部署在服务器上，发生问题时本地无法debug，因此日志变得尤为重要。监控线上日志也成为线上问题定位的有效手段之一</p></blockquote><h2 id="日志监控"><a href="#日志监控" class="headerlink" title="日志监控"></a>日志监控</h2><p>以Linux系统下的项目部署为例，首先进入项目线上部署服务器，找到项目路径以及日志文件生成路径：<br><a id="more"></a><br><img src="/images/3C8B472A-E063-4838-9DCB-4A9E12B77391.png" alt="Alt text"></p><p>找到日志之后，就可以对指定级别的日志文件进行实时监控啦。一般发生问题时该监控error日志，本文以info日志为例：<br><img src="/images/597F5260-EC82-45A5-A829-A503666EBDCC.png" alt="Alt text"></p><p>然后进入软件系统进行相应操作，即可看见操作产生的对应日志了</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;项目在上线上环境之后，由于项目部署在服务器上，发生问题时本地无法debug，因此日志变得尤为重要。监控线上日志也成为线上问题定位的有效手段之一&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;日志监控&quot;&gt;&lt;a href=&quot;#日志监控&quot; class=&quot;headerlink&quot; title=&quot;日志监控&quot;&gt;&lt;/a&gt;日志监控&lt;/h2&gt;&lt;p&gt;以Linux系统下的项目部署为例，首先进入项目线上部署服务器，找到项目路径以及日志文件生成路径：&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux下查找包含指定内容的文件</title>
    <link href="http://yoursite.com/2017/11/30/Linux/"/>
    <id>http://yoursite.com/2017/11/30/Linux/</id>
    <published>2017-11-29T16:00:00.000Z</published>
    <updated>2017-12-04T10:39:46.564Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在<code>hexo</code>上发布第一篇文章之后，对文章进行了分类和打标，当我点击分类|标签查看该下面的文章是，惊奇的发现分类的样式有点小瑕疵。你知道的，强迫症肯定受不了，于是……审查元素，想对不满意的地方进行样式调整。OK，成功找到有问题的样式标签，如图：<br><img src="/images/1.png" alt="问题样式"><br><a id="more"></a></p><p>嗯，可以准备下手修改样式了！but……这个样式表在哪里啊？翻遍了文件夹都没找到对应的这个<code>main.css</code>啊！没关系，接下来该我们本文的主角出场了</p><h2 id="机智的find命令"><a href="#机智的find命令" class="headerlink" title="机智的find命令"></a>机智的find命令</h2><p>以本人对Linux模糊的记忆，搜索到了强悍的find命令<code>find .|xargs grep -ri &quot;xxx&quot;</code>：<br>执行，good，找到了一大堆文件：<br><img src="/images/2.png" alt="find"><br>修改样式，上传，查看blog样式，perfect，手工！</p><h2 id="小插曲"><a href="#小插曲" class="headerlink" title="小插曲"></a>小插曲</h2><blockquote><p>为了省去本文的标题、分类、标签等一系列配置，我打算直接复用上一篇文章的配置。这样的话我首先用<code>vim</code>命令新建了该文章的文件<strong>Linux下查找文件/内容之find命令.md</strong>，然后<code>cat xx.md &gt; Linux下查找文件/内容之find命令.md</code>把<strong>xx</strong>文件的内容复制到了该文件</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;在&lt;code&gt;hexo&lt;/code&gt;上发布第一篇文章之后，对文章进行了分类和打标，当我点击分类|标签查看该下面的文章是，惊奇的发现分类的样式有点小瑕疵。你知道的，强迫症肯定受不了，于是……审查元素，想对不满意的地方进行样式调整。OK，成功找到有问题的样式标签，如图：&lt;br&gt;&lt;img src=&quot;/images/1.png&quot; alt=&quot;问题样式&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
</feed>
